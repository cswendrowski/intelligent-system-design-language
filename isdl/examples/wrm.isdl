config wrm {
    label = "Warrior, Rogue & Mage"
    id = "wrm"
    description = "Custom ISDL Build of Warrior, Rogue & Mage"
    author = "Roman Trevisanut"
}

actor Character {

           string RollVisualizer

    // PAGE 1 - CHARACTER DEFAULT
    section Attributes {
        attribute Warrior(min: 0, max: 100)
        attribute Rogue(min: 0, max: 100)
        attribute Mage(min: 0, max: 100)
           action WARRIOR(icon: "fa-solid fa-helmet-battle"){
            fleeting AtbRoll = roll(1d6 + self.Warrior)
            chat RollResult {
                flavor("Rolling a basic WARRIOR check.")
                AtbRoll
            }
           }
           action ROGUE(icon: "fa-solid fa-hood-cloak"){
            fleeting AtbRoll = roll(1d6 + self.Rogue)
            chat RollResult {
                flavor("Rolling a basic ROGUE check.")
                AtbRoll
            }
           }
           action MAGE(icon: "fa-solid fa-hat-wizard"){
            fleeting AtbRoll = roll(1d6 + self.Mage)
            chat RollResult {
                flavor("Rolling a basic MAGE check.")
                AtbRoll
            }
           }
        //number Warrior(min: 0, initial: 0, max: {return self.MaxWarrior})
        //readonly number MaxWarrior(value: 6)
    }
    //section Progression {
    //    //hidden number AdvBonus(min: 0 value: {return Math.floor(self.Advances / 4)})
    //    //readonly string PassiveGrowth(value: {return "Max " + (6 + self.AdvBonus) + ", HP +" + self.AdvBonus + ", MP +" + self.AdvBonus})
    //    //readonly string AbilityCap(value: {return "Max of " + (6 + self.AdvBonus)})
    //    number Advances(min: 0)
    //    number BonusAdv(min: 0)
    //    }
    section QuickActions {
        action YesOrNo(icon: "fa-solid fa-circle-question"){
            fleeting flip = roll(1d6)
            fleeting Answer = "??"
            if (flip.total > 3) {Answer = "Yes"}
            else {Answer = "No"}
            chat Output {
                flavor ("The real question is: Yes or No?")
                Answer
                }
        }
        action Coin(icon: "fa-solid fa-coin"){
            fleeting flip = roll(1d2)
            fleeting Result = "??"
            if (flip == 2) {Result = "Heads"}
            else {Result = "Tails"}
            chat Output {
                flavor ("The coin's up!")
                Result
            }
        }
        action Rating(icon: "fa-solid fa-star"){
            fleeting Score = roll(d10)
            chat Output {
                flavor ("On a scale from 1 to 10 you give this a...")
                Score
                }
        }
        action HPReset(icon: "fa-solid fa-clover", disabled: self.Health == self.Health.Max) {
            self.Health = self.Health.Max
            chat HealthReset {"I've reset my Health points to " self.Health + "."}
            }
        action FPReset(icon: "fa-solid fa-clover", disabled: self.Fate == self.Fate.Max) {
            self.Fate = self.Fate.Max
            chat FateReset {"I've reset my Fate points to " self.Fate + "."}
            }
        action MPReset(icon: "fa-solid fa-clover", disabled: self.Mana == self.Mana.Max) {
            self.Mana = self.Mana.Max
            chat ManaReset {"I've reset my Mana points to " self.Mana + "."}
            }
        action Talents(icon: "fa-solid fa-arrows-rotate-reverse"){
           each talent in self.Talents {
               if (talent.UsesLeft < talent.MaxUses) {
                talent.system.usesleft = talent.MaxUses
               }
           }
           chat TalentReset {"I've reset all my talent uses to full."}
           }

           action RollAtb(icon: "fa-solid fa-dice-three") {
            // This will let a user roll a flat attribute check, no exploding dice, no skill.
            fleeting Prompt = prompt(label: "Choose Attribute") {
                // Select the Attribute you are going to roll.
                parent<attribute> Attribute(choices: [Character.Warrior, Character.Rogue, Character.Mage])
                // Determine if you have advantage (2d6kh), disadvantage(2d6kl), or neither(1d6). Default is NEITHER.
                string Advantage(choices: ["None","Advantage","Disadvantage"])
                // One-time modifier to the roll. Should default to 0.
                number Modifier
            }
            // Set the basic roll.
            fleeting AtbRoll = ""
            // IF checks for advantage.
            if (Prompt.Advantage == "Advantage") {AtbRoll = roll(2d6kh + Prompt.Attribute + Prompt.Modifier)}
            if (Prompt.Advantage == "Disadvantage")  {AtbRoll = roll(2d6kl + Prompt.Attribute + Prompt.Modifier)}
            else {AtbRoll = roll(1d6 + Prompt.Attribute + Prompt.Modifier)}
            chat RollResult {
                AtbRoll
                tag Prompt.Modifier
                tag Prompt.Advantage
            }
           }
        }
    section ImportantNumbers {
        number Advances(min: 0)
        number BonusAdv(min: 0)
        number DefenseMod(initial: 0)
        number CastPenaltyMod(initial: 0)
        number FullMovement(initial: 10)
        number ShortMovement(initial: 5)
        number ManaMult(initial: 2)
    }
    Advancement[] Advancements
    Skill[] Skills
    Talent[] Talents
    Language[] Languages
    Project[] Projects
    // Page 2 -- Belongings
    page Belongings(icon: "fa-solid fa-backpack") {
    section Appearance {
        unlocked string Cleanliness(choices: ["Pristine","Clean","Grubby","Dirty","Grimy","Filthy"])
        Equipment Outerwear
        Equipment Clothing
        Equipment AccessoryI
        Equipment AccessoryII
        Equipment AccessoryIII
        Equipment AccessoryIV
        }
    //Unused Slots For Accessories
    //    Equipment Facewear
    //    Equipment Cloak
    //    Equipment Legwear
    //    Equipment Footwear
    //    Equipment Necklace
    //    Equipment Belt
    //    Equipment WristLeft
    //    Equipment WristRight
    //    Equipment Gloves
    //    Equipment RingLeft
    //    Equipment RingRight
    //
    section Finance {
        unlocked number Silver(max: 300)
        unlocked number BankedSilver
        unlocked number Investments
        readonly number MonthlyIncome(value: {return 300 * self.Investments})
    }
    section CostOfLiving {
        unlocked string LodgingQuality(choices:["Free","Bare","Modest","Good","Rich","Extravagant"])
        hidden number LodgingQualityCost(value: {
            if (self.LodgingQuality == "Extravagant") {return 600}
            if (self.LodgingQuality == "Rich") {return 300}
            if (self.LodgingQuality == "Good") {return 150}
            if (self.LodgingQuality == "Modest") {return 75}
            if (self.LodgingQuality == "Bare") {return 50}
            else {return 0}
        })
        unlocked string MealQuality(choices:["Free","Bare","Modest","Good","Rich","Extravagant"])
        hidden number MealQualityCost(value: {
            if (self.MealQuality == "Extravagant") {return 160}
            if (self.MealQuality == "Rich") {return 80}
            if (self.MealQuality == "Good") {return 40}
            if (self.MealQuality == "Modest") {return 20}
            if (self.MealQuality == "Bare") {return 10}
            else {return 0}
        })
        unlocked number Days
        readonly number Cost(value: {return (self.LodgingQualityCost + self.MealQualityCost) * self.Days})
        unlocked string PayWith(choices: ["Silver","Banked Silver"])
        action PayCash(icon: "fa-duotone fa-solid fa-coins", disabled: self.Silver < self.Cost) {
            self.Silver -= self.Cost
            self.update()
            chat Paid {
                flavor ("I paid " + self.Cost + " Silver out of pocket for cost of living!" )
                tag self.Cost
                tag self.PayWith
                }
        }
        action UseBank(icon: "fa-solid fa-building-columns", disabled: self.BankedSilver < self.Cost) {
            self.BankedSilver -= self.Cost
            self.update()
            chat Paid {
                flavor ("I paid " + self.Cost + " Silver from my bank for cost of living!" )
                tag self.Cost
                tag self.PayWith
                }
            }
    }
    Armor[] Armors
    Consumable[] Consumables
    Equipment[] Wearables
    Item[] Items
    Weapon[] Weapons
    }
    // PAGE 3 -- COMBAT
    page Combat(icon: "fa-solid fa-swords") {
    //section Resources {
        // Calculate total health for the character.
        health resource Health(max: {return 6 + self.Warrior.value})
        resource Fate(max: {
            if (self.Rogue == 0) {return 1}
            else {return self.Rogue}
            })
        resource Mana(max: {return self.Mage * self.ManaMult})
    //}
    section Defenses {
        readonly string Movement(value: {return self.FullMovement + " Yds (" + self.ShortMovement + " w/ action)"})
        readonly number Dodge(value: {return 3 + (self.Warrior + self.Rogue + self.Mage / 3) + self.ShieldBonus + self.DefenseMod})
        number ArmorPenalty(value: {
            if (self.WornArmor exists) {
                return ((self.WornArmor.system.armorrating - 1) + self.CastPenaltyMod)
                }
                return 0
                })
    }
    section Armor {
        Equipment WornHelmet
        Armor WornArmor
        readonly string ArmorAbsorb(value: {
            if (self.WornArmor exists) {
                return self.WornArmor.system.armorabsorb + " (" + self.WornArmor.system.armorcondition + ")"
                }
                return "N/A"
                })
    }
    section Shield {
        Armor WornShield
        readonly string ShieldBlock(value: {
            if (self.WornShield exists) {
                return self.WornArmor.system.armorrating + " (" + self.WornShield.system.armorcondition + ")"
                }
                return "N/A"
                })
        hidden number ShieldBonus(value: {
            if (self.WornShield exists) {
                return self.WornShield.system.armorrating
                }
                return 0
                })
    }
    //section QuickSkills {
    //Skill QuickSkillI
    //Skill QuickSkillII
    //Skill QuickSkillIII
    //Skill QuickSkillIV
    //Skill QuickSkillV
    //}
    //section QuickItems{
    //Weapon WeaponI
    //Weapon WeaponII
    //Weapon WeaponIII
    //Consumable ConsumableI
    //Consumable ConsumableII
    //Consumable ConsumableIII
    //}
    Armor[] Armors
    Consumable[] Consumables
    Skill[] Skills
    Talent[] Talents
    Weapon[] Weapons
    }
    // Page 4 -- MAGIC
    page Magic(icon: "fa-solid fa-sparkles") {
        section SpellSelection {
            Spell CastSpell
            number SpellCircle(value: {
                if (self.CastSpell exists) {return self.CastSpell.system.circle}
                else {return 0}
            })
            number ManaCost(value: {
                if (self.CastSpell exists) {return self.CastSpell.system.mana}
                else {return 0}
            })
            number DL(value: {
                if (self.CastSpell exists) {return self.CastSpell.system.difficulty}
                else {return 0}
            })
            unlocked number Enhancements
            unlocked number FreeEnhances
            unlocked number CostMod
        }
        section CastOverview {
            readonly number CastPenalty(value: {return (self.ArmorPenalty + (self.ShieldBonus - 1))/2})
            readonly number TotalEnhance(value: {return self.Enhancements + self.FreeEnhances})
            readonly number EnhanceCost(value: {
                if (self.CastSpell exists) {return self.ManaCost / 2 * self.Enhancements}
                else {return 0}
            })
            readonly number EnhanceDL(value: {
                if (self.CastSpell exists) {return self.DL / 2 * self.Enhancements}
                else {return 0}
            })
            number FinalMana(value: {
                if (self.CastSpell exists) {return self.ManaCost + self.CastPenalty + self.EnhanceCost + self.CostMod}
                else {return 0}
            })
            number FinalDL(value: {
                if (self.CastSpell exists) {return self.DL + self.CastPenalty + self.EnhanceDL}
                else {return 0}
            })
        }
        section SpellRoller {
            // SPELL ROLLER HERE
        unlocked string Ability(choices: ["Warrior","Rogue","Mage"])
        unlocked string Advantage(choices: ["None","Advantage","Disadvantage"])
        Skill CastingSkill
        hidden number CastBase(value:{
            if (self.CastingSkill exists) {return self.CastingSkill.system.skillbase}
            else {return 0}
        })
        unlocked number CastBonus(value:{
            if (self.CastingSkill exists) {return self.CastingSkill.system.skilltotal}
            else {return 0}
        })
        unlocked number CastModifier
        unlocked string Resource(choices:["Mana","Health","Other"])
                action RollCast(disabled:  self.ManaCost < 1) {
            // SORT OUT TAGS
            fleeting Level = "None"
            if (self.CastingSkill exists) {Level = self.CastingSkill.system.skilllevel}
            fleeting Skill = "None"
            if (self.CastingSkill exists) {Skill = self.CastingSkill}
            // ROLL THEM BONES
            fleeting Roll = roll(d6)
             if (self.Advantage == "None") {
                if (self.CastBase > 0) {Roll = roll(1d6x + self[self.Ability].mod + self.CastBonus + self.CastModifier)}
                else {Roll = roll(1d6 + self[self.Ability].mod + self.CastModifier)}
            }
            if (self.Advantage == "Advantage") {
                if (self.CastingSkill.system.Trained) {Roll = roll(2d6xkh + self[self.Ability].mod + self.CastBonus + self.CastModifier)}
                else {Roll = roll(2d6kh + self[self.Ability].mod + self.CastModifier)}
            }
            if (self.Advantage == "Disadvantage") {
                if (self.CastingSkill.system.Trained) {Roll = roll(2d6xkl + self[self.Ability].mod + self.CastBonus + self.CastModifier)}
                else {Roll = roll(2d6kl + self[self.Ability].mod + self.CastModifier)}
            }
            chat RollOutcome {
                Roll
                tag self.Ability
                tag Level
                tag self.Advantage
                }
            }
        }
    Spell[] Spells
    Skill[] Skills
    Talent[] Talents
    Consumable[] Consumables
    }
    page ItemLists(icon: "fa-solid fa-table-list") {
    //Advancement[] Advancements
    Armor[] Armors
    Consumable[] Consumables
    Equipment[] Equipables
    Item[] Items
    //Language[] Languages
    //Project[] Projects
    //Skill[] Skills
    //Spell[] Spells
    //Talent[] Talents
    Weapon[] Weapons
    }
    page TestZone(icon: "fa-solid fa-grid-2") {
//        section DollTest {
//            paperdoll QuickItems(image: "img/paperdoll_blank_25.png",size: 55px) {
//                Equipment Helmet(left: 0px, top: 0px)
//                Armor BodyArmor(left: 55px, top: 0px)
//                Armor Shield(left: 110px, top: 0px)
//                Weapon WeaponI(left: 0px, top: 55px)
//                Weapon WeaponII(left: 55px, top: 55px)
//                Weapon WeaponIII(left: 120px, top: 55px)
//                Weapon WeaponIV(left: 175px, top: 55px)
//                Weapon WeaponV(left: 230px, top: 55px)
//                }
//        }
//        section DollTestII {
//            paperdoll Equipped {
//                Equipment Helmet(left: 0px, top: 0px)
//                Equipment BodyArmor(left: 55px, top: 0px)
//                }
//        }
//        section DollTestIII {
//            paperdoll Equipped {
//                Equipment Helmet(left: 0px, top: 0px)
//                Equipment BodyArmor(left: 55px, top: 0px)
//                }
//        }    
        section RollBasics {
            parent<attribute> Attribute(choices: [Character.Warrior, Character.Rogue, Character.Mage])
            string Advantage2(choices: ["None","Advantage","Disadvantage"])
            // One-time modifier to the roll. Should default to 0.
            number Modifier
        }
        section RollPlugins {
            unlocked Skill UseSkill
            unlocked Weapon UseWeapon
            unlocked Spell CastSpell
            action RollSkill(icon: "fa-solid fa-clover", disabled: self.UseSkill !exists) {

            }
            action UseWeapon(icon: "fa-solid fa-clover", disabled: self.UseWeapon !exists) {

            }
            action CastSpell(icon: "fa-solid fa-clover", disabled: self.CastSpell !exists) {

            }
        }
}
}

//////// ITEMS BEGIN HERE
///////
/////
///
//

// LANGUAGE
item Language(svg: "icons/svg/quill-ink.svg", description: "A useful language.") {
    string Kind(choices: ["Common", "Uncommon", "Rare", "Dead", "Ancient"])
    string Fluency(choices: ["Native", "Conversant", "Fluent", "Broken", "Academic"])
}

// TALENT
item Talent(svg: "icons/svg/upgrade.svg", description: "A useful ability or improvement.") {
    section Details {
        string PreReq
        string Kind(choices: ["Standard","Inherent","Free","Special","Negative","Temporary"])
    }
    section Usage {
        string Trigger
        string Requirement
        string Activation(choices: ["Passive", "Action", "Reaction", "Special"])
        string UseLimit(choices: ["Passive","At-Will","Turn","Round","Battle","Day","Session"])
        number MaxUses
        pips UsesLeft(max: {return self.MaxUses})
    }
}

//SKILL
item Skill(svg: "icons/svg/weight-lifting-up.svg", description: "A useful bit of training.") {
    section Rating {
        string CoreAbility(choices: [ "Warrior", "Rogue", "Mage" ])
        string SkillLevel(choices: [ "None","Trained","Expert","Master" ])
        hidden number SkillBase(value: {
            if (self.SkillLevel == "Master") {return 4}
            if (self.SkillLevel == "Expert") {return 3}
            if (self.SkillLevel == "Trained") {return 2}
            if (self.SkillLevel == "None") {return 0}
            return 0
        })
        number SkillMod
        readonly number SkillTotal(value: {return self.SkillBase + self.SkillMod})
    }
    section RollConfig {
        parent<attribute> Ability(choices: [Character.Warrior, Character.Rogue, Character.Mage])
        unlocked number OtherModifier
    // ROLLERS
        action Roll(icon: "fa-solid fa-dice-five") {
            fleeting Skill = self.SkillTotal
            fleeting Roll = roll(d6)
            if (self.SkillLevel == "None") {Roll = roll(1d6 + self.Ability + self.OtherModifier)}
                else {Roll = roll(1d6x + self.Ability + Skill + self.OtherModifier)}
            chat RollOutcome {
                Roll
                tag self.Ability
                tag self.SkillLevel
            }
        }
        action AdvRoll(icon: "fa-solid fa-dice") {
            fleeting Skill = self.SkillTotal
            fleeting Roll = roll(d6)
            if (self.SkillLevel == "None") {Roll = roll(2d6kh + self.Ability + self.OtherModifier)}
                else {Roll = roll(2d6khx + self.Ability + Skill + self.OtherModifier)}
            chat RollOutcome {
                Roll
                tag self.Ability
                tag self.SkillLevel
            }
        }
        action DisRoll(icon: "fa-light fa-dice") {
            fleeting Skill = self.SkillTotal
            fleeting Roll = roll(d6)
            if (self.SkillLevel == "None") {Roll = roll(2d6kl + self.Ability + self.OtherModifier)}
                else {Roll = roll(2d6kl + self.Ability + Skill + self.OtherModifier)}
            chat RollOutcome {
                Roll
                tag self.Ability
                tag self.SkillLevel
            }
        }
    }
}

// CONSUMABLE
item Consumable(svg: "icons/svg/square-bottle.svg", description: "An item that is consumed on use.") {
    section Details {
        string Kind(choices:["Ammo","Elixir","Ration","Light","Other"])
        number Quantity
        number Value(min:0)
        action Use(icon: "fa-solid fa-flask-round-potion") {
            self.Quantity--
            chat PotionUsed {}
            self.update()
            if (self.Quantity == 0) {
                self.delete()
            }
        }
    }
    section Uses {
        string UseLimit(choices: ["N/A", "At-Will", "Turn", "Round", "Battle", "Day", "Session"])
        number MaxUses
    }
}

// WEAPON
item Weapon(svg: "icons/svg/saber-and-pistol.svg", description: "A piece of offensive gear.") {
    section Qualities {
        number Value(min:0)
        boolean TwoHanded
        boolean MeleeWeapon
        boolean RangedWeapon
        boolean ThrownWeapon
        number Range(min: 0)
    }
    section Use {
        parent<attribute> Ability(choices: [Character.Warrior, Character.Rogue, Character.Mage])
        string Skill
        number AttackMod

        action Attack(icon: "fa-solid fa-crosshairs") {
            fleeting AttackRoll = roll(d6x)
            // See if the character has the needed Skill.
            fleeting Level = "None"
            fleeting SkillBonus = 0

            if (parent is Character) {
                each skill in parent.Skills {
                    if (skill.Name equals self.Skill) {
                        Level = skill.SkillLevel
                        SkillBonus = skill.SkillTotal
                    }
                }
            }
            if (Level == "None") {AttackRoll = roll(1d6 + self.Ability + SkillBonus + self.AttackMod)}
            else {AttackRoll = roll(1d6x + self.Ability + SkillBonus + self.AttackMod)}
            fleeting range = "Melee"
            if (self.RangedWeapon == true) {
                range = self.Range + " Yds"
            }
            chat AttackOutcome {
                AttackRoll
                tag self.Ability
                tag self.Skill
                tag Level
                tag range
            }
        }
    action Disadv(icon: "fa-solid fa-crosshairs-simple") {
            fleeting AttackRoll = roll(d6x)
            // See if the character has the needed Skill.
            fleeting Level = "None"
            fleeting SkillBonus = 0

            if (parent is Character) {
                each skill in parent.Skills {
                    if (skill.Name equals self.Skill) {
                        Level = skill.SkillLevel
                        SkillBonus = skill.SkillTotal
                    }
                }
            }
            if (Level == "None") {AttackRoll = roll(1d6 + self.Ability + SkillBonus + self.AttackMod)}
            else {AttackRoll = roll(1d6x + self.Ability + SkillBonus + self.AttackMod)}
            fleeting range = "Melee"
            if (self.RangedWeapon == true) {
                range = self.Range + " Yds"
            }
            chat AttackOutcome {
                AttackRoll
                tag self.Ability
                tag self.Skill
                tag Level
                tag range
            }
        }
    action Advtg(icon: "fa-duotone fa-regular fa-crosshairs") {
            fleeting AttackRoll = roll(d6x)
            // See if the character has the needed Skill.
            fleeting Level = "None"
            fleeting SkillBonus = 0

            if (parent is Character) {
                each skill in parent.Skills {
                    if (skill.Name equals self.Skill) {
                        Level = skill.SkillLevel
                        SkillBonus = skill.SkillTotal
                    }
                }
            }
            if (Level == "None") {AttackRoll = roll(1d6 + self.Ability + SkillBonus + self.AttackMod)}
            else {AttackRoll = roll(1d6x + self.Ability + SkillBonus + self.AttackMod)}
            fleeting range = "Melee"
            if (self.RangedWeapon == true) {
                range = self.Range + " Yds"
            }
            chat AttackOutcome {
                AttackRoll
                tag self.Ability
                tag self.Skill
                tag Level
                tag range
            }
        }
    }
    section Damage {
        string DamageType(choices: ["Cutting", "Piercing", "Bludgeoning", "Ballistic", "Explosive", "Magic", "Psychic", "Solar", "Fire", "Ice", "Corrosive", "Poison", "Spirit"])
        number DiceCount(min: 1)
        string Limit(choices: [ "None","Max5","Max4","Max3","Max2"])
        number DamageMod
        hidden string DamageRoll(value:{
            if (self.Limit == "None") {return self.DiceCount + "d6x"}
            else {return self.DiceCount + "d6xmin1" + self.Limit}
            //if (self.Limit == "None") {return self.DiceCount + "d6xmin1"}
            //else if (self.Limit == "Max5") {return self.DiceCount + "d6xmin1max5"}
            //else if (self.Limit == "Max4") {return self.DiceCount + "d6xmin1max4"}
            //else if (self.Limit == "Max3") {return self.DiceCount + "d6xmin1max3"}
        })
    action Damage(icon: "fa-solid fa-heart-crack" ){
        fleeting damageRoll = roll(self.DamageRoll + self.DamageMod)
        chat AttackOutcome {
            damageRoll
            tag self.DamageType
            }
        }
    }
}

// ITEM
item Item(svg: "icons/svg/open-treasure-chest.svg", description: "A random item of dubious value.") {
    section Qualities {
        string Kind(choices: ["Book","Document","Material","Valuable","Tool","Other","Special"])
        boolean Magical
        number Value(min:0)
        number Quantity(min: 1)
    }
    section Details {
        string Status(choices: ["Carried","Accessible","Stored","Missing"])
        string Location
        string Condition(choices: ["New","Good","Worn","Battered","Damaged","Ruined","Destroyed","Pristine"])
    }
}

// SPELL
item Spell(svg: "icons/svg/magic-swirl.svg", description: "A magical ability you can cast.") {
    section Basics {
        number Circle(initial: 1, max: 7)
        number Difficulty(value: {
            @js{let spellDLScale = [0, 5, 7, 9, 13, 19, 25, 31];}
            return @js{spellDLScale[system.circle]}
        })
        number Mana(value: {
            @js{let spellMPScale = [0, 1, 2, 4, 8, 16, 32, 64];}
            return @js{spellMPScale[system.circle]}
        })
      //  number Targets(value: {
      //      @js{let spellTargetScale = [0, 1, 2, 3, 5, 8, 13, 21];}
      //      return @js{spellTargetScale[system.circle]}
      //      })
      //  number DamageDice(value: {return self.Circle})
      //  number DamageMod(value: {return self.Circle})
      //  number FlatDamage(value: {return self.Circle})
    }
    section Effect{
      //  string DamageClass(choices: ["Physical","Magical"])
        string DamageType(choices: ["Cutting", "Piercing", "Bludgeoning", "Ballistic", "Explosive", "Magic", "Psychic", "Solar", "Fire", "Ice", "Corrosive", "Poison", "Spirit"])
        boolean Intangible
        string Range(choices: ["Touch", "Ranged", "Line of Sight"])
        number Yards
    }
    section Other {
        string Source(choices:["Innate","Channeled","Planar"])
        string Field(choices: ["Forming", "Shaping", "Twisting", "Unaligned"])
      //  string Practice
      //  string Ability(choices: ["Warrior", "Rogue", "Mage"])
      //  string CastingSkill
        //parent<resource> Expend(choices: [Character.Mana,Character.Health])
        string Consumes(choices: ["Mana","Blood","Favor","Fate","Other"])
    }
}

// ADVANCEMENT
item Advancement(svg: "icons/svg/progression.svg", description: "A record of a character's growth.") {
    section Details {
    string AdvancementType(choices: ["Standard","Bonus"])
    string Adding(choices: ["Ability","Talent","Skill","Language","Health","Mana"])
    string Note
    }
    section Logging {
    date Awarded
    string IngameDate
    }
}

// ARMOR
item Armor(svg: "icons/svg/mail-shirt.svg", description: "A piece of protective gear") {
section Protection {
    number ArmorRating(max: {return 10})
    string ArmorCondition(choices:["New","Good","Worn","Battered","Damaged","Ruined","Destroyed"])
    hidden number ArmorReduction(value: {
        if (self.ArmorCondition == "Damaged") {return Math.round(self.ArmorRating / 2)}
        if (self.ArmorCondition == "Ruined") {return Math.round(self.ArmorRating / 2)}
        if (self.ArmorCondition == "Destroyed") {return self.ArmorRating}
        else {return 0}
    })
    readonly number ArmorAbsorb(value: {return self.ArmorRating - self.ArmorReduction})
}
    section Tags {
        boolean Brittle
        boolean Heavy
        boolean Irreparable
        boolean Noisy
    }
    section Qualities {
        number SilverValue
        readonly string Repair(value: {
            if (self.Irreparable == true) {return "Magic Only"}
            else {return self.SilverValue / 10 + "s, " + self.ArmorRating / 2 + " days"}
            })
        string Shape(choices: ["Humanoid","Odakan","Cagran","Savran","Kurook","Other","Any"])
    }
}

// PROJECTS
item Project(svg: "icons/svg/scroll-quill.svg", description: "A task that takes time to complete.") {
    //string Difficulty(choices: ["Easy","Routine","Challenging","Hard","Extreme","Insane","Impossible"])
    //string Complexity(choices: ["Minimal","Moderate","Considerable","Heavy","Extreme","Insane","Immense"])
section Details {
    number Difficulty
    readonly number TaskDL(value: {return 5 + self.Difficulty})
    number Work
}
section Tracking {
    number Progress(max: {
    if (self.Work > 0) {return self.Work}
    else {return 1}
    })
    hidden number Done(value: {return (self.Progress / self.Work) * 100})
    readonly string Completion(value: {return self.Done + "%"})
    }
}

// EQUIPMENT
item Equipment(svg: "icons/svg/pirate-coat.svg", description: "A wearable piece of equipment.") {
    section Qualities {
        string Kind(choices: ["Headwear","Facewear","Cloak","Clothing","Legwear","Footwear","Neckwear","Belt","Bracelet","Gloves","Ring"])
        //string Kind(choices: ["OuterWear","Bracelet","Coat","Clothing","Ring","Footwear","Gloves","Belt","Headwear","Cloak","Neckwear"])
        string Shape(choices: ["Humanoid","Odakan","Cagran","Savran","Kurook","Other","Any"])
        string ClothingStyle(choices: ["Utility","Casual","Dress","Formal","Royal"])
        string Condition(choices: ["New","Good","Worn","Battered","Damaged","Ruined","Destroyed","Pristine"])
        string Origin
        boolean IsMagical
        number SilverValue(min:0)
    }
    //section Appearance {
        //string Quality(choices: ["Shoddy", "Decent", "Good", "Excellent", "Fantastic", "Amazing"])
        //string State(choices: ["New", "Decent", "Worn", "Damaged", "Ruined"])
        //string Condition(choices: ["Pristine", "Clean", "Stained", "Dirty", "Filthy"])
        //string Value(choices: ["Cheap", "Modest", "Good", "Rich", "Extravagant"])
        //string Structure(choices: ["New", "Decent", "Worn", "Damaged", "Ruined"])
        //string Appearance(choices: ["Pristine", "Clean", "Stained", "Dirty", "Filthy"])
    //}
}

//item Potion {
//    number Quantity
//    action Use(icon: "fa-solid fa-flask-round-potion") {
//        self.Quantity--
//        chat PotionUsed {}
//        self.update()
//
//        if (self.Quantity == 0) {
//            self.delete()
//        }
//    }
//}