config wrm {
    label = "Warrior, Rogue & Mage"
    id = "wrm"
    description = "Custom ISDL Build of Warrior, Rogue & Mage"
    author = "Roman Trevisanut"
}

actor Character {
    section Attributes {
        attribute Warrior(min: 0, max: 100)
        attribute Rogue(min: 0, max: 100)
        attribute Mage(min: 0, max: 100)
    }
    
    section Progression {
        number Advances(min: 0)
        number BonusAdv(min: 0)
    }
    
    section QuickActions {
        action YesOrNo(icon: "fa-solid fa-circle-question") {
            fleeting flip = roll(1d2)
            fleeting Answer = "??"
            if (flip > 0) {
                Answer = "Yes"
            }
            else {
                Answer = "No"
            }
            chat Output {
                flavor ("The real question is: Yes or No?")
                Answer
            }
        }
        action Coin(icon: "fa-solid fa-coin"){
            fleeting flip = roll(1d2)
            fleeting Result = "??"
            if (flip > 1) {Result = "Heads"}
            else {Result = "Tails"}
            chat Output {
                flavor ("The coin's up!")
                Result
            }
        }
        action Rating(icon: "fa-solid fa-star"){
            fleeting Score = roll(1d10)
            chat Output {
                flavor ("On a scale from 1 to 10 you give this a...")
                Score
            }
        }
        action HPReset(icon: "fa-solid fa-clover", disabled: self.Health == self.Health.Max) {
            self.Health = self.Health.Max
            chat HealthReset {"I've reset my Health points to " self.Health + "."}
        }
        action FPReset(icon: "fa-solid fa-clover", disabled: self.Fate == self.Fate.Max) {
            self.Fate = self.Fate.Max
            chat FateReset {"I've reset my Fate points to " self.Fate + "."}
        }
        action MPReset(icon: "fa-solid fa-clover", disabled: self.Mana == self.Mana.Max) {
            self.Mana = self.Mana.Max
            chat ManaReset {"I've reset my Mana points to " self.Mana + "."}
        }
        action Talents(icon: "fa-solid fa-arrows-rotate-reverse"){
            each talent in self.Talents {
                if (talent.system.usesleft < talent.system.maxuses) {
                    talent.system.usesleft = talent.system.maxuses
                }
            }
            update self.Talents
            chat TalentReset {"I've reset all my talent uses to full."}
        }
    }
    section ActiveModifiers {
        number DefenseMod(initial: 0)
        number CastPenaltyMod(initial: 0)
        number FullMovement(initial: 10)
        number ShortMovement(initial: 5)
        number ManaMult(initial: 2)
    }
    Advancement[] Advancements
    Skill[] Skills
    Talent[] Talents
    Language[] Languages
    Project[] Projects
    // Page 2 -- Belongings
    page Belongings(icon: "fa-solid fa-backpack", background: diamonds) {
        section Appearance {
            unlocked string Cleanliness(choices: ["Pristine","Clean","Grubby","Dirty","Grimy","Filthy"])
            Equipment Outerwear
            Equipment Clothing
            Equipment AccessoryI
            Equipment AccessoryII
            Equipment AccessoryIII
            Equipment AccessoryIV
            
            paperdoll Equipped {
                Armor Head(left: 123px, top: 15px)
                Armor Chest(left: 123px, top: 72px)
                Weapon Primary(left: 80px, top: 130px)
            }
        }
        //Unused Slots For Accessories
        //    Equipment Facewear
        //    Equipment Cloak
        //    Equipment Legwear
        //    Equipment Footwear
        //    Equipment Necklace
        //    Equipment Belt
        //    Equipment WristLeft
        //    Equipment WristRight
        //    Equipment Gloves
        //    Equipment RingLeft
        //    Equipment RingRight
        //
        section Finance {
            unlocked number Silver(max: 300)
            unlocked number BankedSilver
            unlocked number Investments
            readonly number MonthlyIncome(value: {return 300 * self.Investments})
        }
        section CostOfLiving {
            unlocked string LodgingQuality(choices:["Free","Bare","Modest","Good","Rich","Extravagant"])
            hidden number LodgingQualityCost(value: {
                if (self.LodgingQuality == "Extravagant") {return 600}
                if (self.LodgingQuality == "Rich") {return 300}
                if (self.LodgingQuality == "Good") {return 150}
                if (self.LodgingQuality == "Modest") {return 75}
                if (self.LodgingQuality == "Bare") {return 50}
                return 0
            })
            unlocked string MealQuality(choices:["Free","Bare","Modest","Good","Rich","Extravagant"])
            hidden number MealQualityCost(value: {
                if (self.MealQuality == "Extravagant") {return 160}
                if (self.MealQuality == "Rich") {return 80}
                if (self.MealQuality == "Good") {return 40}
                if (self.MealQuality == "Modest") {return 20}
                if (self.MealQuality == "Bare") {return 10}
                return 0
            })
            unlocked number Days
            readonly number Cost(value: {return self.LodgingQualityCost + self.MealQualityCost * self.Days})
            unlocked string PayWith(choices: ["Silver","Banked Silver"])
            action PayCash(icon: "fa-duotone fa-solid fa-coins", disabled: self.Silver < self.Cost) {
                self.Silver -= self.Cost
                self.update()
                chat Paid {
                    flavor ("I paid " + self.Cost + " Silver out of pocket for cost of living!" )
                    tag self.Cost
                    tag self.PayWith
                }
            }
            action UseBank(icon: "fa-solid fa-building-columns", disabled: self.BankedSilver < self.Cost) {
                self.BankedSilver -= self.Cost
                self.update()
                chat Paid {
                    flavor ("I paid " + self.Cost + " Silver from my bank for cost of living!" )
                    tag self.Cost
                    tag self.PayWith
                }
            }
        }
        Armor[] Armors
        Consumable[] Consumables
        Equipment[] Wearables
        Weapon[] Weapons
    }
    // PAGE 3 -- COMBAT
    page Combat(icon: "fa-solid fa-swords") {
        //section Resources {
            // Calculate total health for the character.
            health resource Health(max: {return 6 + self.Warrior.value})
            resource Fate(max: {
                if (self.Rogue == 0) {return 1}
                else {return self.Rogue}
            })
            resource Mana(max: {return self.Mage * self.ManaMult})
        //}
        section Defenses {
            readonly number Dodge(value: {return 3 + (self.Warrior + self.Rogue + self.Mage / 3) + self.ShieldBonus + self.DefenseMod})
            Equipment WornHelmet
            Armor WornArmor
            Armor WornShield
            readonly string ArmorAbsorb(value: {
                if (self.WornArmor exists) {
                    return self.WornArmor.system.armorabsorb + " (" + self.WornArmor.system.armorcondition + ")"
                }
                return "N/A"
            })
            readonly string ShieldBlock(value: {
                if (self.WornShield exists) {
                    return self.WornArmor.system.armorrating + " (" + self.WornShield.system.armorcondition + ")"
                }
                return "N/A"
            })
            hidden number ArmorPenalty(value: {
                if (self.WornArmor exists) {
                    return ((self.WornArmor.system.armorrating - 1) + self.CastPenaltyMod)
                }
                return 0
            })
            hidden number ShieldBonus(value: {
                if (self.WornShield exists) {
                    return self.WornShield.system.armorrating
                }
                return 0
            })
        }
        section QuickSkills {
            readonly string Movement(value: {return self.FullMovement + " Yds (" + self.ShortMovement + " w/ action)"})
            Skill QuickSkillI
            Skill QuickSkillII
            Skill QuickSkillIII
            Skill QuickSkillIV
            Skill QuickSkillV
        }
        section QuickItems{
            Weapon WeaponI
            Weapon WeaponII
            Weapon WeaponIII
            Consumable ConsumableI
            Consumable ConsumableII
            Consumable ConsumableIII
        }
        Armor[] Armors
        Consumable[] Consumables
        Skill[] Skills
        Talent[] Talents
        Weapon[] Weapons
    }
    // Page 4 -- MAGIC
    page Magic(icon: "fa-solid fa-sparkles", background: temple) {
        section SpellSelection {
            Spell CastSpell
            number SpellCircle(value: {
                if (self.CastSpell exists) {return self.CastSpell.system.circle}
                else {return 0}
            })
            number ManaCost(value: {
                if (self.CastSpell exists) {return self.CastSpell.system.mana}
                else {return 0}
            })
            number DL(value: {
                if (self.CastSpell exists) {return self.CastSpell.system.difficulty}
                else {return 0}
            })
            unlocked number Enhancements
            unlocked number FreeEnhances
            unlocked number CostMod
        }
        section CastOverview {
            readonly number CastPenalty(value: {return (self.ArmorPenalty + (self.ShieldBonus - 1))/2})
            readonly number TotalEnhance(value: {return self.Enhancements + self.FreeEnhances})
            readonly number EnhanceCost(value: {
                if (self.CastSpell exists) {return self.ManaCost / 2 * self.Enhancements}
                else {return 0}
            })
            readonly number EnhanceDL(value: {
                if (self.CastSpell exists) {return self.DL / 2 * self.Enhancements}
                else {return 0}
            })
            number FinalMana(value: {
                if (self.CastSpell exists) {return self.ManaCost + self.CastPenalty + self.EnhanceCost + self.CostMod}
                else {return 0}
            })
            number FinalDL(value: {
                if (self.CastSpell exists) {return self.DL + self.CastPenalty + self.EnhanceDL}
                else {return 0}
            })
        }
        section SpellRoller {
            // SPELL ROLLER HERE
            unlocked string Ability(choices: ["Warrior","Rogue","Mage"])
            unlocked string Advantage(choices: ["None","Advantage","Disadvantage"])
            Skill CastingSkill
            hidden number CastBase(value:{
                if (self.CastingSkill exists) {return self.CastingSkill.system.skillbase}
                else {return 0}
            })
            unlocked number CastBonus(value:{
                if (self.CastingSkill exists) {return self.CastingSkill.system.skilltotal}
                else {return 0}
            })
            unlocked number CastModifier
            unlocked string Resource(choices:["Mana","Health","Other"])
            action RollCast(disabled:  self.ManaCost < 1) {
                // SORT OUT TAGS
                fleeting Level = "None"
                if (self.CastingSkill exists) {Level = self.CastingSkill.system.skilllevel}
                fleeting Skill = "None"
                if (self.CastingSkill exists) {Skill = self.CastingSkill}
                // ROLL THEM BONES
                fleeting Roll = roll(d6)
                if (self.Advantage == "None") {
                    if (self.CastBase > 0) {Roll = roll(1d6x + self[self.Ability].mod + self.CastBonus + self.CastModifier)}
                    else {Roll = roll(1d6 + self[self.Ability].mod + self.CastModifier)}
                }
                if (self.Advantage == "Advantage") {
                    if (self.CastingSkill.system.Trained) {Roll = roll(2d6xkh + self[self.Ability].mod + self.CastBonus + self.CastModifier)}
                    else {Roll = roll(2d6kh + self[self.Ability].mod + self.CastModifier)}
                }
                if (self.Advantage == "Disadvantage") {
                    if (self.CastingSkill.system.Trained) {Roll = roll(2d6xkl + self[self.Ability].mod + self.CastBonus + self.CastModifier)}
                    else {Roll = roll(2d6kl + self[self.Ability].mod + self.CastModifier)}
                }
                chat RollOutcome {
                    Roll
                    tag self.Ability
                    tag Level
                    tag self.Advantage
                }
            }
        }
        Spell[] Spells
        Skill[] Skills
        Talent[] Talents
        Consumable[] Consumables
    }
}

//////// ITEMS BEGIN HERE
///////
/////
///
//

// LANGUAGE
item Language(svg: "icons/svg/quill-ink.svg", description: "A useful language.") {
    string Kind(choices: ["Common", "Uncommon", "Rare", "Dead", "Ancient"])
    string Fluency(choices: ["Native", "Conversant", "Fluent", "Broken", "Academic"])
}

// TALENT
item Talent(svg: "icons/svg/upgrade.svg", description: "A useful ability or improvement.") {
    section Details {
        string PreReq
        string Kind(choices: ["Standard","Inherent","Free","Special","Negative","Temporary"])
    }
    section Usage {
        string Trigger
        string Requirement
        string Activation(choices: ["Passive", "Action", "Reaction", "Special"])
        string UseLimit(choices: ["Passive","At-Will","Turn","Round","Battle","Day","Session"])
        number MaxUses
        pips UsesLeft(max: {return self.MaxUses})
    }
}

//SKILL
item Skill(svg: "icons/svg/shield.svg", description: "A useful bit of training.") {
    section Rating {
        string CoreAbility(choices: [ "Warrior", "Rogue", "Mage" ])
        string SkillLevel(choices: [ "None","Trained","Expert","Master" ])
        hidden number SkillBase(value: {
            if (self.SkillLevel == "Master") {return 4}
            if (self.SkillLevel == "Expert") {return 3}
            if (self.SkillLevel == "Trained") {return 2}
            if (self.SkillLevel == "None") {return 0}
            return 0
        })
        number SkillMod
        readonly number SkillTotal(value: {return self.SkillBase + self.SkillMod})
    }
    section RollConfig {
        parent<attribute> Ability(choices: [Character.Warrior, Character.Rogue, Character.Mage])
        unlocked number OtherModifier

        // ROLLERS
        action Roll(icon: "fa-solid fa-dice-five") {
            fleeting Skill = self.SkillTotal
            fleeting Roll = roll(d6)
            if (self.SkillLevel == "None") {Roll = roll(1d6 + self.Ability + self.OtherModifier)}
            else {Roll = roll(1d6x + self.Ability + Skill + self.OtherModifier)}
            chat RollOutcome {
                Roll
                tag self.Ability
                tag self.SkillLevel
            }
        }
        
        action AdvRoll(icon: "fa-solid fa-dice") {
            fleeting Skill = self.SkillTotal
            fleeting Roll = roll(d6)
            if (self.SkillLevel == "None") {Roll = roll(2d6kh + self.Ability + self.OtherModifier)}
            else {Roll = roll(2d6khx + self.Ability + Skill + self.OtherModifier)}
            chat RollOutcome {
                Roll
                tag self.Ability
                tag self.SkillLevel
            }
        }
        action DisRoll(icon: "fa-light fa-dice") {
            fleeting Skill = self.SkillTotal
            fleeting Roll = roll(d6)
            if (self.SkillLevel == "None") {Roll = roll(2d6kl + self.Ability + self.OtherModifier)}
            else {Roll = roll(2d6kl + self.Ability + Skill + self.OtherModifier)}
            chat RollOutcome {
                Roll
                tag self.Ability
                tag self.SkillLevel
            }
        }
    }
}

// CONSUMABLE
item Consumable(svg: "systems/wrm/icons/svg/square-bottle.svg", description: "An item that is consumed on use.") {
    section Details {
        string Kind(choices:["Ammo","Elixir","Ration","Light","Other"])
        string Quantity
        number Value(min:0)
    }
    section Uses {
        string UseLimit(choices: ["N/A", "At-Will", "Turn", "Round", "Battle", "Day", "Session"])
        number MaxUses
        pips UsesLeft(max: {
            if (self.MaxUses > 5) {return 5}
            else {return self.MaxUses}
        })
    }
}

// WEAPON
item Weapon(svg: "icons/svg/saber-and-pistol.svg", description: "A piece of offensive gear.") {
    section Qualities {
        number Value(min:0)
        boolean TwoHanded
        boolean MeleeWeapon
        boolean RangedWeapon
        boolean ThrownWeapon
        number Range(min: 0)
    }
    section Use {
        parent<attribute> Ability(choices: [Character.Warrior, Character.Rogue, Character.Mage])
        string Skill
        number AttackMod
        
        action Attack(icon: "fa-solid fa-crosshairs") {
            fleeting AttackRoll = roll(d6x)
            // See if the character has the needed Skill.
            fleeting Level = "None"
            fleeting SkillBonus = 0
            
            if (parent is Character) {
                each skill in parent.Skills {
                    if (skill.Name equals self.Skill) {
                        Level = skill.SkillLevel
                        SkillBonus = skill.SkillTotal
                    }
                }
            }
            if (Level == "None") {AttackRoll = roll(1d6 + self.Ability + SkillBonus + self.AttackMod)}
            else {AttackRoll = roll(1d6x + self.Ability + SkillBonus + self.AttackMod)}
            fleeting range = "Melee"
            if (self.RangedWeapon == true) {
                range = self.Range + " Yds"
            }
            chat AttackOutcome {
                AttackRoll
                tag self.Ability
                tag self.Skill
                tag Level
                tag range
            }
        }
        action Disadv(icon: "fa-solid fa-crosshairs-simple") {
            fleeting AttackRoll = roll(d6x)
            // See if the character has the needed Skill.
            fleeting Level = "None"
            fleeting SkillBonus = 0
            
            if (parent is Character) {
                each skill in parent.Skills {
                    if (skill.Name equals self.Skill) {
                        Level = skill.SkillLevel
                        SkillBonus = skill.SkillTotal
                    }
                }
            }
            if (Level == "None") {AttackRoll = roll(1d6 + self.Ability + SkillBonus + self.AttackMod)}
            else {AttackRoll = roll(1d6x + self.Ability + SkillBonus + self.AttackMod)}
            fleeting range = "Melee"
            if (self.RangedWeapon == true) {
                range = self.Range + " Yds"
            }
            chat AttackOutcome {
                AttackRoll
                tag self.Ability
                tag self.Skill
                tag Level
                tag range
            }
        }
        action Advtg(icon: "fa-duotone fa-regular fa-crosshairs") {
            fleeting AttackRoll = roll(d6x)
            // See if the character has the needed Skill.
            fleeting Level = "None"
            fleeting SkillBonus = 0
            
            if (parent is Character) {
                each skill in parent.Skills {
                    if (skill.Name equals self.Skill) {
                        Level = skill.SkillLevel
                        SkillBonus = skill.SkillTotal
                    }
                }
            }
            if (Level == "None") {AttackRoll = roll(1d6 + self.Ability + SkillBonus + self.AttackMod)}
            else {AttackRoll = roll(1d6x + self.Ability + SkillBonus + self.AttackMod)}
            fleeting range = "Melee"
            if (self.RangedWeapon == true) {
                range = self.Range + " Yds"
            }
            chat AttackOutcome {
                AttackRoll
                tag self.Ability
                tag self.Skill
                tag Level
                tag range
            }
        }
    }
    section Damage {
        string DamageType(choices: ["Cutting", "Piercing", "Bludgeoning", "Ballistic", "Explosive", "Magic", "Psychic", "Solar", "Fire", "Ice", "Corrosive", "Poison", "Spirit"])
        number DiceCount(min: 1)
        string Limit(choices: [ "None","Max5","Max4","Max3","Max2"])
        number DamageMod
        hidden string DamageRoll(value:{
            if (self.Limit == "None") {return self.DiceCount + "d6x"}
            else {return self.DiceCount + "d6xmin1" + self.Limit}
            //if (self.Limit == "None") {return self.DiceCount + "d6xmin1"}
            //else if (self.Limit == "Max5") {return self.DiceCount + "d6xmin1max5"}
            //else if (self.Limit == "Max4") {return self.DiceCount + "d6xmin1max4"}
            //else if (self.Limit == "Max3") {return self.DiceCount + "d6xmin1max3"}
        })
        action Damage(icon: "fa-solid fa-heart-crack" ){
            fleeting damageRoll = roll(self.DamageRoll + self.DamageMod)
            chat AttackOutcome {
                damageRoll
                tag self.DamageType
            }
        }
    }
}

// ITEM
item Item(svg: "icons/svg/shield.svg", description: "A random item of dubious value.") {
    section Details {
        string Kind(choices: ["Book","Document","Material","Valuable","Tool","Other","Special"])
        boolean IsMagical
        number Value(min:0)
        number Quantity(min: 1)
    }
}

// SPELL
item Spell(svg: "icons/svg/magic-swirl.svg", description: "A magical ability you can cast.") {
    section Basics {
        number Circle(initial: 1, max: 7)
        number Difficulty(value: {
            @js{let spellDLScale = [0, 5, 7, 9, 13, 19, 25, 31];}
            return @js{spellDLScale[system.circle]}
        })
        number Mana(value: {
            @js{let spellMPScale = [0, 1, 2, 4, 8, 16, 32, 64];}
            return @js{spellMPScale[system.circle]}
        })
        number Targets(value: {
            @js{let spellTargetScale = [0, 1, 2, 3, 5, 8, 13, 21];}
            return @js{spellTargetScale[system.circle]}
        })
        number DamageDice(value: {return self.Circle})
        number DamageMod(value: {return self.Circle})
        number FlatDamage(value: {return self.Circle})
    }
    section Effect{
        string DamageClass(choices: ["Physical","Magical"])
        string DamageType
        boolean Intangible
        string Range(choices: ["Touch", "Ranged", "Line of Sight"])
        number Yards
    }
    section Other {
        string Source(choices:["Innate","Channeled","Planar"])
        string Field(choices: ["Forming", "Shaping", "Twisting", "Unaligned"])
        string Practice
        string Ability(choices: ["Warrior", "Rogue", "Mage"])
        string CastingSkill
        //parent<resource> Expend(choices: [Character.Mana,Character.Health])
        string Consumes(choices: ["Mana","Blood","Other"])
    }
}

// ADVANCEMENT
item Advancement(svg: "icons/svg/progression.svg", description: "A record of a character's growth.") {
    section Details {
        string AdvancementType(choices: ["Standard","Bonus"])
        string Adding(choices: ["Ability","Talent","Skill","Language","Health","Mana"])
        string Note
    }
    section Logging {
        date Awarded
        string IngameDate
    }
}

// ARMOR
item Armor(svg: "icons/svg/mail-shirt.svg", description: "A piece of protective gear") {
    section Protection {
        number ArmorRating(max: {return 10})
        string ArmorCondition(choices:["New","Good","Worn","Battered","Damaged","Ruined","Destroyed"])
        hidden number ArmorReduction(value: {
            if (self.ArmorCondition == "Damaged") {return Math.round(self.ArmorRating / 2)}
            if (self.ArmorCondition == "Ruined") {return Math.round(self.ArmorRating / 2)}
            if (self.ArmorCondition == "Destroyed") {return self.ArmorRating}
            else {return 0}
        })
        readonly number ArmorAbsorb(value: {return self.ArmorRating - self.ArmorReduction})
    }
    section Tags {
        boolean Brittle
        boolean Heavy
        boolean Irreparable
        boolean Noisy
    }
    section Qualities {
        number SilverValue
        readonly string Repair(value: {
            if (self.Irreparable == true) {return "Magic Only"}
            else {return self.SilverValue / 10 + "s, " + self.ArmorRating / 2 + " days"}
        })
        string Shape(choices: ["Humanoid","Odakan","Cagran","Savran","Kurook","Other","Any"])
    }
}

// PROJECTS
item Project(svg: "icons/svg/scroll-quill.svg", description: "A task that takes time to complete.") {
    //string Difficulty(choices: ["Easy","Routine","Challenging","Hard","Extreme","Insane","Impossible"])
    //string Complexity(choices: ["Minimal","Moderate","Considerable","Heavy","Extreme","Insane","Immense"])
    section Details {
        number Difficulty
        readonly number TaskDL(value: {return 5 + self.Difficulty})
        number Work
    }
    section Tracking {
        number Progress(max: {
            if (self.Work > 0) {return self.Work}
            else {return 1}
        })
        hidden number Done(value: {return (self.Progress / self.Work) * 100})
        readonly string Completion(value: {return self.Done + "%"})
    }
}

// EQUIPMENT
item Equipment(svg: "icons/svg/pirate-coat.svg", description: "A wearable piece of equipment.") {
    section Qualities {
        string Kind(choices: ["Headwear","Facewear","Cloak","Clothing","Legwear","Footwear","Neckwear","Belt","Bracelet","Gloves","Ring"])
        //string Kind(choices: ["OuterWear","Bracelet","Coat","Clothing","Ring","Footwear","Gloves","Belt","Headwear","Cloak","Neckwear"])
        string Shape(choices: ["Humanoid","Odakan","Cagran","Savran","Kurook","Other","Any"])
        string ClothingStyle(choices: ["Utility","Casual","Dress","Formal","Royal"])
        string Condition(choices: ["New","Good","Worn","Battered","Damaged","Ruined","Destroyed","Pristine"])
        string Origin
        boolean IsMagical
        string Value
        number SilverValue(min:0)
    }
    //section Appearance {
        //string Quality(choices: ["Shoddy", "Decent", "Good", "Excellent", "Fantastic", "Amazing"])
        //string State(choices: ["New", "Decent", "Worn", "Damaged", "Ruined"])
        //string Condition(choices: ["Pristine", "Clean", "Stained", "Dirty", "Filthy"])
        //string Value(choices: ["Cheap", "Modest", "Good", "Rich", "Extravagant"])
        //string Structure(choices: ["New", "Decent", "Worn", "Damaged", "Ruined"])
        //string Appearance(choices: ["Pristine", "Clean", "Stained", "Dirty", "Filthy"])
    //}
}
