config wrm {
    label = "Warrior, Rogue & Mage"
    id = "wrm"
    description = "ISDL Build of Warrior, Rogue & Mage"
    author = "Roman Trevisanut"
}
actor Character {
    // PAGE 1 - THE CHARACTER [DEFAULT] (Abilities, Skills, Talents, Advancements, Languages)
    section Resources {
        // Calculate total health for the character.
        hidden number HealthMod
        hidden number HealthRegen
        resource Health(max: {
            return self.Warrior + 6 + self.HealthMod
        })
        hidden number FateMod
        resource Fate(max: {
            if (self.Rogue == 0) {
                return 1 + self.FateMod
            }
            return self.Rogue + self.FateMod
        })
        hidden number ManaMult(min: 1, initial: 2)
        hidden number ManaMod
        resource Mana(max: {
            return (self.Mage * self.ManaMult + self.ManaMod)
        })
    }
    section Defenses {
        // Temporary health for physical and magical shields. No max on these.
        number BarrierHealth(min: 0, initial: 0)
        number ShieldHealth(min: 0, initial: 0)
    }
    section ResourceActions {
        action Rest(icon: "fa-solid fa-heart-pulse", disabled: self.Health == self.Health.max) {
            fleeting HealthRecover = self.Warrior + self.HealthRegen
            if (self.Mana + HealthRecover > self.Health.max) {self.Health = self.Health.max}
            else {self.Health += HealthRecover}
            self.update()
            chat HealthHeal {"I've rested and recovered " self.Warrior + self.HealthRegen + " health."}
        }
        action FullHeal(icon: "fa-duotone fa-solid fa-heart-circle-plus", disabled: self.Health == self.Health.max) {
            self.Health = self.Health.Max
            chat HealthReset {"I've reset my health to " self.Health + "."}
        }
        action Spend(icon: "fa-regular fa-clover") {
            self.Fate -= 1
            self.update()
            chat FateSpend {"I've spent a fate point and now have " self.Fate + " left."}
        }
        action Add(icon: "fa-solid fa-clover") {
            self.Fate += 1
            self.update()
            chat FateAdd {"I've gaing a fate point and now have " self.Fate + "."}
        }
        action Reset(icon: "fa-duotone fa-solid fa-clover", disabled: self.Fate == self.Fate.max) {
            self.Fate = self.Fate.max
            chat FateReset {"I've reset my fate points to " self.Fate + "."}
        }
        action Meditate(icon: "fa-duotone fa-solid fa-sparkles", disabled: self.Mana == self.Mana.max) {
            fleeting ManaRecover = self.Mage + self.ManaRegen
            if (self.Mana + ManaRecover > self.Mana.max) {self.Mana = self.Mana.max}
            else {self.Mana += ManaRecover}
            self.update()
            chat Meditation {
                "I've meditated, and recovered " + ManaRecover + " mana."
            }
        }
        hidden number ManaRegen(initial: 0)
        action Refill(icon: "fa-duotone fa-solid fa-sparkles", disabled: self.Mana == self.Mana.max) {
            self.Mana = self.Mana.max
            chat ManaRefill {"I've refilled my mana."}
        }
    }
    section Abilities {
        hidden number WarriorMax
        hidden number RogueMax
        hidden number MageMax
        number Warrior(min: 0, initial: 0, max: {return 6 + self.WarriorMax})
        number Rogue(min: 0, initial: 0, max: {return 6 + self.RogueMax})
        number Mage(min: 0, initial: 0, max: {return 6 + self.MageMax})
    }
    section Armor {
        Armor Armor
        hidden number ArmorRating(value: {
            if (self.Armor exists) {
                return self.Armor.system.armorating
            }
            return 0
        })
        //string ArmorType(choices:["None","Padded","Lamellar","Leather","Scale","Chain","Splinted","Banded","Plate"])
        //hidden number ArmorRating(value: {
            //    if (self.ArmorType == "Plate") {return 8}
            //    if (self.ArmorType == "Banded") {return 7}
            //    if (self.ArmorType == "Splinted") {return 6}
            //    if (self.ArmorType == "Chain") {return 5}
            //    if (self.ArmorType == "Scale") {return 4}
            //    if (self.ArmorType == "Leather") {return 3}
            //    if (self.ArmorType == "Lamellar") {return 2}
            //    if (self.ArmorType == "Padded") {return 1}
            //    if (self.ArmorType == "None") {return 0}
            //    return 0
            //})
            readonly number ArmorAbsorb(value:{return self.ArmorRating})
            readonly number ArmorPenalty(value: {
                if (self.ArmorRating < 1) {return 0}
                return self.ArmorRating - 1
            })
            hidden number DefenseBase(value:{return 4})
            hidden number DefenseAdjust(value: {return self.Warrior + self.Rogue + self.Mage})
            hidden number DefenseAdd(value: {return self.DefenseAdjust / 3})
            readonly number Defense(value: {return self.DefenseBase + self.DefenseAdd})
        }
        Advancement[] Advancements
        Talent[] Talents
        Skill[] Skills
        Language[] Languages
        // Page 2 - THEIR EQUIPMENT (Armor, Weapons, Items)
        page Equipment(icon: "fa-duotone fa-solid fa-shirt") {
            section Finances {
                number Silver(max: 300)
                number BankedSilver
                number Investments
                readonly number MonthlyIncome(value: {return 300 * self.Investments})
                string LodgingQuality(choices:["Free","Bare","Modest","Good","Rich","Extravagant"])
                hidden number LodgingQualityCost(value: {
                    if (self.LodgingQuality == "Extravagant") {return 600}
                    if (self.LodgingQuality == "Rich") {return 300}
                    if (self.LodgingQuality == "Good") {return 150}
                    if (self.LodgingQuality == "Modest") {return 75}
                    if (self.LodgingQuality == "Bare") {return 50}
                    return 0
                })
                string MealQuality(choices:["Free","Bare","Modest","Good","Rich","Extravagant"])
                hidden number MealQualityCost(value: {
                    if (self.MealQuality == "Extravagant") {return 160}
                    if (self.MealQuality == "Rich") {return 80}
                    if (self.MealQuality == "Good") {return 40}
                    if (self.MealQuality == "Modest") {return 20}
                    if (self.MealQuality == "Bare") {return 10}
                    return 0
                })
                number Days
                readonly number Cost(value: {return self.LodgingQualityCost + self.MealQualityCost * self.Days})
                action PayBill(icon: "fa-duotone fa-solid fa-coins", disabled: self.Silver < self.Cost) {
                    self.Silver -= self.Cost
                    self.update()
                    chat Paid {
                        flavor ("I paid " + self.Cost + " silver for cost of living and now have " + self.Silver + " left!" )
                        self.Cost
                    }
                }
                
            }
            Item[] Items
            Equipment[] Equipment
            Weapon[] Weapons
        }
        
        // Page 3 - COMBAT (Resources, Defense, )
        page Combat(icon: "fa-duotone fa-solid fa-shield-halved") {
            section Defense {
                number ParryBonus
                string ParryAbility(choices: ["Warrior", "Rogue", "Mage"])
                action Parry(icon: "fa-solid fa-swords") {
                    fleeting Parry = roll(d6 + self[self.ParryAbility])
                    chat ParryChat {
                        Parry
                        "I attempted to parry using " self.ParryAbility "."
                    }
                }
                number DodgeBonus
                action Dodge(icon: "fa-solid fa-person-running-fast") {
                    fleeting Dodge = roll(1d6 + self.Rogue)
                    chat DodgeChat {
                        Dodge
                        "I attempted to dodge an attack."
                    }
                }
            }
            Spell[] Spells
        }
}
    
actor PC {
    // ALTERNATE SHEET LAYOUT TEST
    // PAGE 1 - Play Area [DEFAULT]
    section Resources {
        // Calculate total health for the character.
        hidden number HealthMod
        hidden number HealthRegen
        resource Health(max: {
            return self.Warrior + 6 + self.HealthMod
        })
        hidden number FateMod
        resource Fate(max: {
            if (self.Rogue == 0) {
                return 1 + self.FateMod
            }
            return self.Rogue + self.FateMod
        })
        hidden number ManaMult(min: 1, initial: 2)
        hidden number ManaMod
        resource Mana(max: {
            return (self.Mage * self.ManaMult + self.ManaMod)
        })
    }
    section Defenses {
        // Character Defense -- Using new formula where all ability scores contribute.
        hidden number DefenseBase(value:{return 4})
        hidden number DefenseAdjust(value: {return self.Warrior + self.Rogue + self.Mage})
        hidden number DefenseAdd(value: {return self.DefenseAdjust / 3})
        readonly number Defense(value: {return self.DefenseBase + self.DefenseAdd})
        readonly number ArmorAbsorb(value:{return self.ArmorRating})
    }
    section SkillRoll {
        string Ability(choices: ["Warrior","Rogue","Mage"])
        string Advantage(choices: ["None","Advantage","Disadvantage"])
        Skill Skill
        hidden number SkillBase(value:{
            if (self.Skill exists) {return self.Skill.system.skillbase}
            else {return 0}
        })
        number SkillBonus(value:{
            if (self.Skill exists) {return self.Skill.system.skilltotal}
            else {return 0}
        })
        number OtherModifier
        action Roll {
            fleeting Level = "None"
            if (self.Skill exists) {Level = self.Skill.system.skilllevel}
            fleeting Skill = "None"
            if (self.Skill exists) {Skill = self.Skill.name}
            fleeting Roll = roll(d6)
            if (self.Advantage == "None") {
                if (self.SkillBase > 0) {Roll = roll(1d6x + self[self.Ability] + self.SkillBonus + self.OtherModifier)}
                else {Roll = roll(1d6 + self[self.Ability] + self.OtherModifier)}
            }
            if (self.Advantage == "Advantage") {
                if (self.Skill.system.Trained) {Roll = roll(2d6xkh + self[self.Ability] + self.SkillBonus + self.OtherModifier)}
                else {Roll = roll(2d6kh + self[self.Ability] + self.OtherModifier)}
            }
            if (self.Advantage == "Disadvantage") {
                if (self.Skill.system.Trained) {Roll = roll(2d6xkl + self[self.Ability] + self.SkillBonus + self.OtherModifier)}
                else {Roll = roll(2d6kl + self[self.Ability] + self.OtherModifier)}
            }
            chat RollOutcome {
                Roll
                tag self.Ability
                tag Skill
                tag Level
                tag self.Advantage
            }
        }
    }
    section Abilities {
        hidden number WarriorMax
        hidden number RogueMax
        hidden number MageMax
        number Warrior(min: 0, initial: 0, max: {return 6 + self.WarriorMax})
        number Rogue(min: 0, initial: 0, max: {return 6 + self.RogueMax})
        number Mage(min: 0, initial: 0, max: {return 6 + self.MageMax})
    }
    section Armor {
        Armor Armor
        readonly number ArmorRating(value: {
            if (self.Armor exists) {
                return self.Armor.system.armorrating
                }
                return 0
                })
        readonly number ArmorPenalty(value: {
            if (self.ArmorRating < 1) {return 0}
            return self.ArmorRating - 1
        })
    }
    section Progression {
        number Advancements
        readonly number MajorAdvancements(min: 0, value: {return self.Advancements / 4})
        number BonusAdvancements
    }
    Talent[] Talents
    Skill[] Skills
    Language[] Languages
    Spell[] Spells
    Advancement[] Advancements
    // PAGE 2 -- Contents TBD. Doesn't work????
    page Two(icon: "fa-solid fa-backpack", background: food) {
        section NumberHole {
            string Location
        }
    }
}

//////// ITEMS BEGIN HERE
///////
/////
///
//

// LANGUAGE
item Language{
    string Type(choices: ["Common", "Uncommon", "Rare", "Dead", "Ancient"])
    string Fluency(choices: ["Native", "Conversant", "Fluent", "Broken", "Academic"])
}

// TALENT
item Talent {
    section Usage {
        string Trigger
        string Requirement
        string Activation(choices: ["Passive", "Action", "Reaction", "Special"])
        string UseLimit(choices: ["Passive","At-Will","Turn","Round","Battle","Day","Session"])
        number MaxUses
        pips UsesLeft(max: {return self.MaxUses})
    }
}

//SKILL
item Skill {
    string Ability(choices: [ "Warrior", "Rogue", "Mage" ])
    string SkillLevel(choices: [ "None","Trained","Expert","Master" ])
    number SkillMod
    hidden number SkillBase(value: {
        if (self.SkillLevel == "Master") {return 4}
        if (self.SkillLevel == "Expert") {return 3}
        if (self.SkillLevel == "Trained") {return 2}
        if (self.SkillLevel == "None") {return 0}
        return 0
    })
    readonly number SkillTotal(value: {return self.SkillBase + self.SkillMod})
}

// CONSUMABLE
item Consumable {
    string Type(choices:["Ammo","Elixir","Ration","Other"])
    string UseLimit(choices: ["N/A", "At-Will", "Turn", "Round", "Battle", "Day", "Session"])
    number MaxUses
    pips UsesLeft(max: {return self.MaxUses})
}

// WEAPON
item Weapon {
    section Use {
        string Ability(choices: [ "Warrior", "Rogue", "Mage" ])
        string Skill
    }
    section Qualities {
        number AttackMod
        number DamageMod
        number Dice
        number DiceMod
        string Limit(choices: [ "None","Max5","Max4","Max3"])
    }
    action Attack {
        // Roll is 1d6 + self.Ability + Weapon Skill.
        // Can we make it check against the defense of the target actor?
        // Damage should be automatically rolled on a hit?
        // Option to turn a miss into a hit with a button?
        }
}

// ITEM
item Item {
    section Flags{
        boolean AmmoItem
        boolean ConsumableItem
        boolean ClothingItem
        boolean ValuableItem
        boolean StoredItem
    }
    section Basic {
        number Count
        number Value
        readonly number TotalValue(value: {return self.Count * self.Value})
    }
    
    section ItemState {
        string Quality(choices: ["Poor", "Decent", "Fine", "Excellent", "Amazing"])
        string Structure(choices: ["New", "Decent", "Worn", "Damaged", "Ruined"])
        string Appearance(choices: ["Pristine", "Clean", "Stained", "Dirty", "Filthy"])
    }
    
    section Abilities{
        string RelevantAbility(choices: ["Warrior", "Rogue", "Mage"])
        string RelevantSkill
        number AccuracyMod
        number DamageMod
        number Dice
        number DiceMod
    }
    
    section Consumable{
        
    }
    section Weapon{
        boolean CanCut
        boolean CanPierce
        boolean CanBludgeon
        boolean MeleeWeapon
        boolean RangedWeapon
        boolean ThrowableWeapon
        number Range
    }
    section Clothing{
        string Descriptor(choices: ["Common","Rugged","Fine","Extravagant","Special"])
    }
    section Armor{
    }
    section Storage{
        string Location
    }
}

// SPELL
item Spell {
    section Basics {
        number Circle(initial: 1, max: 7)
        number Difficulty(value: {
            @js{let spellDLScale = [0, 5, 7, 9, 13, 19, 25, 31];}
            return @js{spellDLScale[system.circle]}
        })
        number Mana(value: {
            @js{let spellMPScale = [0, 1, 2, 4, 8, 16, 32, 64];}
            return @js{spellMPScale[system.circle]}
        })
        number Targets(value: {
            @js{let spellTargetScale = [0, 1, 2, 3, 5, 8, 13, 21];}
            return @js{spellTargetScale[system.circle]}
        })
        number DamageDice(value: {return self.Circle})
        number DamageMod(value: {return self.Circle})
        number FlatDamage(value: {return self.Circle})
    }
    section Effect{
        string DamageClass(choices: ["Physical","Magical"])
        string DamageType
        boolean Intangible
        string Range(choices: ["Touch", "Ranged", "Line of Sight"])
        number Yards
    }
    section Other {
        string Source(choices:["Innate","Channeled","Planar"])
        string Field(choices: ["Forming", "Shaping", "Twisting", "Unaligned"])
        string Practice
        string CastingAbility(choices: ["Warrior", "Rogue", "Mage"])
        string CastingSkill
        string Consumes(choices: ["Mana","Blood","Favor"])
    }
}

// ADVANCEMENT
item Advancement {
    string AdvancementType(choices: ["Standard","Major"])
    string AwardDate
    string IngameDate
}

// ARMOR
item Armor {
    number ArmorRating(max: {return 10})
    string ArmorState(choices:["Good","Worn","Battered","Damaged","Ruined"])
    readonly number ArmorReduction(value: {
        if (self.ArmorState == "Good") {return 0}
        if (self.ArmorState == "Worn") {return 0}
        if (self.ArmorState == "Battered") {return self.ArmorRating / 4}
        if (self.ArmorState == "Damaged") {return self.ArmorRating / 2}
        if (self.ArmorState == "Ruined") {return self.ArmorRating}
        return 0
    })
}

// EQUIPMENT [To be removed]
item Equipment {
    string Type(choices: ["Armor","Ring","Footwear","Gloves","Belt","Headwear","Cloak","Neckwear"])
    number Bonus
}
