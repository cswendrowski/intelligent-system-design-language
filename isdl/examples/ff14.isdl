config FFXIV {
    label = "Final Fantasy XIV"
    id = "ffxiv"
    description = "Final Fantasy XIV TTRPG"
    author = "Cody Swendrowski"
}

actor PC {
    
    column {
        choice<string> Class(choices: ["Dragoon", "Black Mage", "White Mage", "Warrior"])
        choice<string> Role(choices: ["Tank", "Healer", "DPS"])
        number Level
    }
    
    section PrimaryAttributes {
        attribute STR(min: 0, max: 5, mod: {
            return self.STR
        }, roll: roll(d20 + self.STR))
        attribute DEX(min: 0, max: 5, mod: {
            return self.DEX
        }, roll: roll(d20 + self.STR))
        attribute VIT(min: 0, max: 5, mod: {
            return self.VIT
        }, roll: roll(d20 + self.STR))
        attribute INT(min: 0, max: 5, mod: {
            return self.INT
        }, roll: roll(d20 + self.STR))
        attribute MND(min: 0, max: 5, mod: {
            return self.MND
        }, roll: roll(d20 + self.STR))
    }
    
    section SecondaryAttributes {
        number Defense
        number MagicDefense
        number Vigilance
        number Speed
    }
    
    section Resources {
        health resource HP
        tracker MP(style: icons, icon: 'fa-solid fa-sparkles')
        
        action RecoverMP {
            self.MP += 2

            chat MPRecovery {
                "Recovered 2 MP"
            }
        }
    }
    
    gmOnly boolean LimitBreakAllowed
    
    table<PrimaryAbility> PrimaryAbilities
    table<SecondaryAbility> SecondaryAbilities
    table<InstantAbility> InstantAbilities
    table<Consumable> Consumables
}

item Consumable {
    number Quantity

    action Use {
        if (self.Quantity > 0) {
            self.Quantity--
            chat ConsumableUse {
                "Used a consumable item."
                tag self.Quantity
            }
        } else {
            chat NoConsumables {
                "No consumables left to use."
            }
        }
    }
}

item PrimaryAbility {
    column {
        number Cost
        string Target
        string Range
        boolean Invoked
    }
    column {
        parent<attribute> CheckAttribute(choices: [PC])
        choice<string> CR(choices: ["Defense", "MagicDefense"])
        
        action Roll(icon: "fa-solid fa-dice-d20") {
            if (parent is PC) {
                if (target is NPC) {
                    fleeting attack = roll(d20 + self.CheckAttribute)
                    parent.MP -= self.Cost
                    fleeting directHit = false

                    if (self.CR == "Defense") {
                        directHit = attack.total >= target.Defense
                    } else if (self.CR == "MagicDefense") {
                        directHit = attack.total >= target.MagicDefense
                    }
                    
                    if (directHit) {
                        chat DirectHit {
                            flavor "Direct Hit!"
                            attack
                            tag self.Cost
                            tag self.Target
                            tag self.Invoked
                            tag self.Range
                            tag self.CR
                            tag self.Limitation
                            self.BaseEffect
                            self.DirectHit
                            self.Effects
                        }
                    } else {
                        chat GlancingBlow {
                            flavor "Glancing Blow"
                            attack
                            tag self.Cost
                            tag self.Target
                            tag self.Invoked
                            tag self.Range
                            tag self.CR
                            tag self.Limitation
                            self.BaseEffect
                            self.Effects
                        }
                    }
                }
                else if (target is PC) {
                    fleeting check = roll(d20 + self.CheckAttribute)
                    parent.MP -= self.Cost
                    
                    chat Use {
                        check
                        tag self.Cost
                        tag self.Target
                        tag self.Invoked
                        tag self.Range
                        tag self.CR
                        tag self.Limitation
                        self.BaseEffect
                        self.DirectHit
                        self.Effects
                    }
                }
                else {
                    chat NoTarget {
                        "No target selected"
                    }
                }
            }
        }
    }
    row {
        html BaseEffect
        html DirectHit
        string Limitation
    }
    
    
}

item SecondaryAbility {
    column {
        number Cost
        string Target
        string Range
        boolean Invoked
        html BaseEffect
    }
    column {
        choice<string> Limitation(choices: ["None", "Per Phase"])
        tracker UsesLeft(style: icons, icon: "fa-solid fa-bolt", min: 0)
    
        action Use(icon: "fa-solid fa-fire") {
            if (parent is PC) {
                parent.MP -= self.Cost
                self.UsesLeft--
                chat AbilityUse {
                    tag self.Cost
                    tag self.Target
                    tag self.Invoked
                    self.BaseEffect
                    tag self.Limitation
                    tag self.UsesLeft
                }
            }
        }
        
        action ResetUses(icon: "fa-solid fa-undo") {
            self.UsesLeft = self.UsesLeft.Max
        }
    }
}

item InstantAbility {
    column {
        boolean LimitBreak
        number Cost
        string Target
        string Trigger
        html BaseEffect
    }

    column {
        choice<string> Limitation(choices: ["Per Phase"])
        
        tracker UsesLeft(style: icons, icon: "fa-solid fa-bolt", min: 0)
        
        action Use(icon: "fa-solid fa-fire") {
            if (parent is PC) {
                parent.MP -= self.Cost
                self.UsesLeft--
                chat AbilityUse {
                    tag self.Cost
                    tag self.Target
                    tag self.Trigger
                    self.BaseEffect
                    self.Limitation
                    self.Effects
                }
                if (self.LimitBreak) {
                    play(file: "audio/sfx/FFXIV_Limit_Break_Activated.mp3")
                }
            }
        }
        
        action ResetUses(icon: "fa-solid fa-undo") {
            self.UsesLeft = self.UsesLeft.Max
        }
    }
}

actor NPC {
    
    column {
        health resource HP
        choice<string> Size(choices: ["Medium", "Large", "Huge"])
        string Species
    }
    
    section PrimaryAttributes {
        attribute STR(min: -5, max: 6, mod: {
            return self.STR
        }, roll: roll(d20 + self.STR))
        attribute DEX(min: -5, max: 6, mod: {
            return self.DEX
        }, roll: roll(d20 + self.STR))
        attribute VIT(min: -5, max: 6, mod: {
            return self.VIT
        }, roll: roll(d20 + self.STR))
        attribute INT(min: -5, max: 6, mod: {
            return self.INT
        }, roll: roll(d20 + self.STR))
        attribute MND(min: -5, max: 6, mod: {
            return self.MND
        }, roll: roll(d20 + self.STR))
    }
    
    section SecondaryAttributes {
        number Defense
        number MagicDefense
        number Vigilance
        number Speed
    }
    
    table<NpcAbility> Abilities
    table<NpcMarker> Markers
    table<NpcTrait> Traits
}

item NpcAbility {
    column {
        string Target
        string Range
        string Aspect
        boolean Invoked
    }

    column {
        parent<attribute> CheckAttribute(choices: [NPC])
        choice<string> CR(choices: ["Defense", "MagicDefense"])

        action Roll(icon: "fa-solid fa-dice-d20") {
            fleeting attack = roll(d20 + self.CheckAttribute.mod)
            
            if (target is PC) {

                fleeting directHit = false
                if (self.CR == "Defense") {
                    directHit = attack.total >= target.Defense
                } else if (self.CR == "MagicDefense") {
                    directHit = attack.total >= target.MagicDefense
                }

                if (directHit) {
                    chat DirectHit {
                        flavor "Direct Hit!"
                        attack
                        tag self.Target
                        tag self.Invoked
                        tag self.Range
                        tag self.CR
                        self.BaseEffect
                        self.DirectHit
                        tag self.Limitation
                        self.Effects
                    }
                } else {
                    chat GlancingBlow {
                        flavor "Glancing Blow"
                        attack
                        tag self.Target
                        tag self.Invoked
                        tag self.Range
                        tag self.CR
                        tag self.Limitation
                        self.BaseEffect
                        self.Effects
                    }
                }
                play(file: "audio/sfx/FFXIV_Aggro.mp3")
            }
            else {
                chat NoTarget {
                    "No target selected"
                }
            }
        }
    }

    row {
        html BaseEffect
        html DirectHit
        string Limitation
    }
}

item NpcMarker {
    column {
        choice<string> Type(choices: ["Stationary", "Mobile"])
        string Origin
        string Area
        measuredTemplate Template
    }
    column {
        string Target
        string Trigger
        
        action Use(icon: "fa-solid fa-map-marker") {
            chat Marker {
                self.Origin
                self.Area
                self.Template
                self.Target
                self.Trigger
                tag self.Type
                self.Effects
            }
        }
    }
}

item NpcTrait {
    string Summary
}
