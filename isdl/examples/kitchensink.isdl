config KitchenSink {
    label = "Kitchen Sink"
    id = "kitchen-sink"
    description = "An dump of all the features"
    author = "Cody Swendrowski"
}

actor Hero(icon: "fa-solid fa-sword", background: texture) {
    
    function Print(number value) {
        log("Leveled up to Level " + value)
    }
    
    function FightFightFight(number mod) returns number {
        fleeting rollResult = roll(d6 + self.Fight + mod)
        return rollResult.total
    }
    
    page PlainFields {
        
        section Basic {
            string StringField
            number NumberField
            boolean BooleanField
            html HtmlField
        }
        
        section Complex {
            resource ResourceField
            tracker TrackerField
            attribute AttributeField
            //damageTrack DamageTrackField
        }
        
        section DateTime {
            date DateField
            time TimeField
            datetime DateTimeField
        }
        
        section Dice {
            die DieField
            //dice DiceField
            //roll RollField
        }
        
        section DocumentLinks {
            Skill[] SkillsTable
            Skill SingleDocumentField
            choice<Skill> ChoiceField
            paperdoll PaperdollField {
                Skill A(left: 0px, top: 0px)
                Skill B(left: 50px, top: 50px)
            }
        }
    }
    
    page Info(background: hideout) {
        section BasicInfo {
            gmOnly string HeroType(choices: ["A", "B", "C"], icon: "fa-solid fa-cube", color: #a586c0)
            string DamageType(choices: ["⚔️ Cutting", "🤺 Piercing", "🔨 Bludgeoning", "🔫 Ballistic", "💥 Explosive", "🪄 Magic", "🔮 Psychic", "☀️ Solar", "🔥 Fire", "❄️ Ice", "💀 Corrosive", "☠️ Poison", "👻 Spirit"])
            string Summary(icon: "fa-solid fa-info-circle", color: #a586c0)
            string Text2(icon: "fa-solid fa-book", label: "Locked Text Field", value: "This is a locked text field that cannot be edited by the player.", color: #a586c0)
            
            html Background(visibility: {
                return Visibility.hidden
            }, icon: "fa-solid fa-scroll", color: #a586c0)
            hidden string BackgroundText
            
            action EndCombat(visibility: {
                if (User.isGM) {
                    return Visibility.default
                }
                else {
                    return Visibility.readonly
                }
                }) {
                Combat.end()
            }
            
        }
        
        section Level {
            
            gmOnly tracker Fate(min: 0, style: icons, icon: "fa-bolt-lightning")
            secret tracker Shield(min: 0, style: segmented, segments: 5, icon: "fa-solid fa-shield-halved")
            tracker Wounds(style: slashes)
            gmEdit tracker Heat(style: dial)
            tracker Time(style: clock, segments: 5, color: #a586c0, visibility: {
                return self.VisibleUnlessDisabled(self.OutOfTime)
            })
            boolean OutOfTime(icon: "fa-solid fa-hourglass-end", color: #a586c0)
            number Level(min: 1, max: 10,  icon: "fa-solid fa-cube")
            tracker Plain(style: plain, color: #a586c0, value: {
                return self.Level
            })
            
            on preApplyDamage (damage) {
                if (self.Shield > 0) {
                    fleeting shieldAmount = self.Shield
                    self.Shield -= damage
                    if (damage > shieldAmount) {
                        damage -= shieldAmount
                        } else {
                        damage = 0
                    }
                }
            }
            
            on appliedDamage(damage) {
                if (self.HP <= 0) {
                    self.Wounds += 1
                    self.HP = self.Endure + 6
                    if (self.Wounds > 5) {
                        self.Dead = true
                        chat Death {
                            flavor ("You have died!")
                        }
                        } else {
                        chat Wounded {
                            flavor ("You are wounded! " + self.Wounds + " Wounds remaining.")
                        }
                    }
                }
            }
            
            function VisibleUnlessDisabled(boolean disabled) returns string {
                if (disabled) {
                    return Visibility.hidden
                }
                return Visibility.default
            }
            
            action LevelUp(visibility: { if (self.Experience < 10) return Visibility.locked }, color: #a586c0) {
            self.Experience -= 10
            self.Level++
            self.update()
            wait 30 seconds
            self.Print(self.Level)
            fleeting amount = self.FightFightFight(self.Level)
            log("Leveled up to Level " + self.Level + " with a Fight bonus of " + amount)
        }
        pips ExperienceTrack(max: 10, style: circles, value: {
            return self.Experience
        })
    }
    
    tracker Experience(min: 0, max: 100, color: #a586c0)
    
    action FlipACoin {
        fleeting result = roll(d2)
        fleeting resultText = "Heads"
        if (result.Total == 1) {
            resultText = "Tails"
        }
        chat CoinFlip {
            resultText
            result
        }
    }
}

page Stats(icon: "fa-solid fa-chart-line", background: bricks) {
    section Attributes {
        attribute Fight(min: 1, max: 30, color: #a586c0, icon: "fa-solid fa-hand-fist", mod: {
            return (self.Fight - 10) / 2
        }, roll: roll(d20 + self.Fight))
        attribute Flight(min: 1, max: 30, mod: {
            return (self.Flight - 10) / 2
        })
        attribute Endure(min: 1, max: 30, mod: {
            return (self.Endure - 10) / 2
        })
        attribute Persuade(min: 1, max: 30, mod: {
            return (self.Persuade - 10) / 2
        })
        attribute Grit(min: 1, max: 6, style: plain, roll: roll(d20 + self.Grit))
    }
    
    section StatusEffects {
        boolean Slowed
        boolean Dazed
    }
    
    section Counter {
        readonly number Count
        action Increment {
            self.Count++
        }
        action Decrement {
            self.Count--
        }
        action Reset {
            self.Count = 0
        }
        
        on combatStart {
            log("Combat started")
            self.Count = 0
        }
        
        on combatEnd {
            log("Combat ended")
            self.Count = 0
        }
        
        on roundStart (roundNumber) {
            log("Round " + roundNumber)
            self.Count = 0
        }
        
        on roundEnd (roundNumber) {
            log("Round " + roundNumber + " ended")
        }
        
        on turnStart {
            log("Turn of " + self.Name)
        }
        
        on turnEnd {
            log("Turn of " + self.Name + " ended")
        }
        
        on turnIsNext {
            log("Turn of " + self.Name + " is next")
        }
        
        on death {
            log("Death of " + self.Name)
        }
    }
    
    section FancyCounter {
        readonly number Count2
        unlocked number FancyCounterAmount
        action Increment2 {
            self.Count2 += self.FancyCounterAmount
        }
        action Decrement2 {
            self.Count2 -= self.FancyCounterAmount
        }
        action Reset2 {
            self.Count2 = 0
        }
    }
    
    section Test {
        number SomeThing
        unlocked number AnotherThing
    }
}



section Health {
    death status Dead(when: self.HP <= 0)
    status Staggered
    
    health resource HP(max: {
        return self.Endure + 6
    })
    
    number Defense(value: {
        if (self.Fight + self.Endure equals 0) {
            return 4
        }
        return self.Fight + self.Endure / 2 + 4
    })
    number Stealth(max: {
        return self.Flight
    })
    
    
    resource Stagger(max: {return self.Endure + self.Fight})
    action Recover(visibility: { if (self.Stagger < 1) return Visibility.locked }) {
    self.Stagger -= self.Endure
    if (self.Stagger < 0) {
        self.Stagger = 0
    }
    self.update()
    chat Stagger {
        flavor ("Staggered! " + 2 + " Remaining: " + self.Stagger)
        self.Stagger
    }
}

resource Mana(max: 10)
action Refill(icon: "fa-duotone fa-solid fa-sparkles", visibility: { if (self.Mana == self.Mana.Max) return Visibility.locked }) {
self.Mana = self.Mana.Max
}

pips DamageTrack(max: 5, style: circles, value: {
    return self.Endure
})
readonly number Crisis

action Heal {
    fleeting amount = roll((self.Endure)d6)
    self.HP += amount._total
    chat Healed {
        amount
    }
}

number Level2
action Roll {
    fleeting levelToBonus = [ 1, 2, 4, 6, 8 ]
    fleeting itemBonus = 0
    
    each skill in self.Skills {
        itemBonus += skill.SkillMod
    }
    fleeting levelBonusRoll = roll(d6 + levelToBonus[1] + itemBonus)
    chat LevelBonus {
        levelBonusRoll
    }
    play(file: "sfx/sword.mp3", volume: 1.0)
}
}

section Damage {
    damageTrack Damage(max: 5, types: ["bashing", "lethal", "aggravated"])
    
    action HealDamageTrack(icon: "fa-solid fa-flask-round-potion") {
        if ( self.Damage.bashing > 0 ) {
            self.Damage.bashing--
            self.Damage.empty++
        }
    }
    
    action TakeBashing {
        eternal amount = 5
        if ( self.Damage.bashing < amount ) {
            self.Damage.bashing++
            self.Damage.empty--
        }
        @js{const roll = await new Roll("1d10").roll();}
        @js{roll.toMessage({flavor: "Bashing Damage"});}
        self.Damage.bashing += @js{roll._total}
    }
}

hidden number AvailableSkillLevels

page Equipment(icon: "fa-solid fa-backpack", background: food) {
    Equipment Armor
    Equipment[] Armors(where: item.Type equals "Armor")
    Equipment[] Weapons(where: item.Type equals "Weapon")
    Potion[] Potion
}
Spell[] Spells
Skill[] Skills

}

actor NPC(svg: "/icons/creatures/mammals/beast-horned-scaled-glowing-orange.webp") {
    number Level(initial: 4,
    min: 1,
    max: 7,
    icon: "fa-solid fa-chart-line",
    color: #FF7F50)
    
    attribute Monster
    
    number Defense(value: {
        if (self.Armor exists) {
            return self.Level + self.Armor.system.bonus
        }
        return self.Level
    })
    Equipment Armor
    Equipment[] Equipment(where: item.Type equals "Armor")
}

item Skill {
    //string Ability(choices: [ "Fight", "Flight", "Endure", "Persuade" ])
    parent<attribute> Ability(choices: [Hero])
    boolean Trained
    number SkillMod
    tracker UsesLeft(style: slashes)
    die Die
    dice Dice
    readonly number Skill(value: {
        if (self.Trained > 0) {return 2 + self.SkillMod}
        return 0 + self.SkillMod
    })
    
    action Roll {
        fleeting skill = 0
        fleeting answer = prompt(label: "Bonus", target: user, width: 1000, location: 250, 250) {
            number Bonus
            boolean HasAdvantage
        }
        
        if (answer.HasAdvantage) {
            skill = self.Skill
            fleeting abilityRoll = roll(self.Die + self.Ability + skill + answer.Bonus)
            chat AbilityUse {
                abilityRoll
                tag self.Ability
                tag self.Skill
            }
        }
        else {
            fleeting abilityRoll = roll(d6 + self.Ability + answer.Bonus)
            chat AbilityUse {
                abilityRoll
                tag self.Ability
                tag self.Skill
            }
        }
    }
    
    action SimpleFightRoll {
        if (parent is Hero) {
            fleeting abilityRoll = roll(self.Die + parent.Fight.mod)
            chat AbilityUse {
                abilityRoll
                tag "Fight"
                tag self.Skill
            }
        }
    }
}

item Equipment {
    string Type(choices: ["Armor", "Weapon"])
    number Bonus

    page ParentRefs {
        parent<attribute> ParentAttribute
        parent<resource> ParentResource
        parent<number> ParentNumber
        parent<boolean> ParentBoolean
        parent<date> ParentDate
        parent<time> ParentTime
        parent<datetime> ParentDateTime
        parent<die> ParentDie
        //parent<dice> ParentDice
        parent<string> ParentString
        parent<tracker> ParentTracker
        parent<choice> ParentChoice
        parent<paperdoll> ParentPaperdoll
        parent<html> ParentHtml
    }
}

item Spell {
    string Type(choices: ["Attack", "Defense", "Healing"])
    string Class(choices: ["Fire", "Water", "Earth", "Air"])
    number Level
    number Cost
    string Summary
}

item Potion {
    number Quantity
    action Use(icon: "fa-solid fa-flask-round-potion") {
        self.Quantity--
        chat PotionUsed {}
        self.update()
        
        if (self.Quantity == 0) {
            self.delete()
        }
    }
}
