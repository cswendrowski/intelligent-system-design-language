config FabulaUltima {
    label = "Fabula Ultima"
    id = "fabula-ultima"
    description = "Test generation of Fabula Ultima"
    author = "Cody Swendrowski"
}

actor Hero {

    string Type(choices: ["A", "B", "C"])

    section Level {
        number Experience
        number Level

        action LevelUp(disabled: self.Experience < 10) {
            self.Experience -= 10
            self.Level++
        }
    }

    section Attributes {
        number Dexterity
        number Insight
        number Might
        number Willpower
        attribute Strength(min: 1, max: 30, mod: {
            return (self.Strength - 10) / 2
        })
    }

    section StatusEffects {
        boolean Slowed
        boolean Dazed
        boolean Weakened
        boolean Shaken
        boolean Enraged
        boolean Test
    }

    section Traits {
        string Identity
        string Theme
        string Origin
    }

    html Background
    
    section Resources {
        number FabulaPoints
        resource InventoryPoints(max: 6)
        number Zenit
    }

    section Health {
        boolean HasHealing
        resource HP(max: {
            return self.Warrior + 6
        })
        resource MP
        attribute Warrior(min: 0, max: 6, mod: {
            return self.Warrior
        })
        attribute Rogue(min: 0, max: 6, mod: {
            return self.Rogue
        })
        attribute Mage(min: 0, max: 6, mod: {
            return self.Mage
        })
        number Defense(value: { 
            if (self.Rogue + self.Warrior equals 0) {
                return 4
            }
            return self.Warrior + self.Rogue / 2 + 4
        })
        number Stealth(max: {
            return self.Rogue
        })
        resource Fate(max: {
            fleeting amount = nothing
            if (self.Rogue equals 0) {
                amount = 1
            }
            else if (self.Warrior equals 0) {
                amount = 2
            }
            else {
                amount = self.Rogue
            }
            return amount
        })

        resource Health(max: {
            return self.Warrior + 6
        })
        resource ShieldHealth(max: 99)
        resource BarrierHealth(max: 99)
        resource Stagger(max: {return 0 + self.Warrior + self.Mage})
        action Recover(disabled: self.Stagger < 1) {
            self.Stagger -= self.Rogue
            if (self.Stagger < 0) {
                self.Stagger = 0
            }
            chat Stagger {
                ("Staggered!" + 2)
                self.Stagger
            }
        }

        pips DamageTrack(max: 5, style: circles)
        readonly number Crisis

        action Heal {
            fleeting amount = roll((self.Warrior)d6)
            self.HP += amount
            chat Healed {
                amount
            }
        }
    }

    section Damage {
        damageTrack Damage(max: 5, types: ["bashing", "lethal", "aggravated"])

        action HealDamageTrack(icon: "fa-solid fa-flask-round-potion") {
            if ( self.Damage.bashing > 0 ) {
                self.Damage.bashing--
                self.Damage.empty++
            }
        }

        action TakeBashing {
            eternal amount = 5
            if ( self.Damage.bashing < amount ) {
                self.Damage.bashing++
                self.Damage.empty--
            }
            @js{const roll = await new Roll("1d10").roll();}
            @js{roll.toMessage({flavor: "Bashing Damage"});}
            self.Damage.bashing += @js{roll._total}
        }
    }

    hidden number AvailableSkillLevels

    Equipment Armor
    Equipment[] Armors(where: item.Type equals "Armor")
    Equipment[] Weapons(where: item.Type equals "Weapon")
    Spell[] Spells
    Skill[] Skills
}

actor NPC {
    number Level(initial: 4,
     min: 1,
     max: 7,
     icon: "fa-solid fa-chart-line",
     color: #FF7F50)
    
    number Defense(value: {
        if (self.Armor exists) {
            return self.Level + self.Armor.system.bonus
        }
        return self.Level
    })
    Equipment Armor
    Equipment[] Equipment(where: item.Type equals "Armor")
}

item Skill {
  string Ability(choices: [ "Warrior", "Rogue", "Mage" ])
  boolean Trained
  number SkillMod
  readonly number Skill(value: {
    if (self.Trained > 0) {return 2 + self.SkillMod}
    return 0 + self.SkillMod
  })

  action Roll {
    fleeting skill = 0
    if (self.Skill > 0) {
        skill = self.Skill
      fleeting abilityRoll = roll(d6x6 + parent[self.Ability].mod + skill)
      chat AbilityUse {
            abilityRoll
            tag self.Ability
            tag self.Skill
        }
    }
    else {
        fleeting abilityRoll = roll(d6 + parent[self.Ability].mod)
        chat AbilityUse {
            abilityRoll
            tag self.Ability
            tag self.Skill
        }
    }
  }
}

item Equipment {
    string Type(choices: ["Armor", "Weapon"])
    number Bonus
}

item Spell {
    string Type(choices: ["Attack", "Defense", "Healing"])
    string Class(choices: ["Fire", "Water", "Earth", "Air"])
    number Level
    number Cost
    string Summary
}
