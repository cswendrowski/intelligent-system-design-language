import { type Module, inject } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { IntelligentSystemDesignLanguageGeneratedModule, IntelligentSystemDesignLanguageGeneratedSharedModule } from './generated/module.js';
import { IntelligentSystemDesignLanguageValidator, registerValidationChecks } from './intelligent-system-design-language-validator.js';
import { IsdlScopeProvider } from './isdl-scope-provider.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type IntelligentSystemDesignLanguageAddedServices = {
    validation: {
        IntelligentSystemDesignLanguageValidator: IntelligentSystemDesignLanguageValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type IntelligentSystemDesignLanguageServices = LangiumServices & IntelligentSystemDesignLanguageAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const IntelligentSystemDesignLanguageModule: Module<IntelligentSystemDesignLanguageServices, PartialLangiumServices & IntelligentSystemDesignLanguageAddedServices> = {
    validation: {
        IntelligentSystemDesignLanguageValidator: () => new IntelligentSystemDesignLanguageValidator()
    },
    references: {
        ScopeProvider: (services) => new IsdlScopeProvider(services)
    }
};

// export class IsdlScopeProvider implements ScopeProvider {
//     private astNodeDescriptionProvider: AstNodeDescriptionProvider;
//     constructor(services: LangiumCoreServices) {
//         //get some helper services
//         this.astNodeDescriptionProvider = services.workspace.AstNodeDescriptionProvider;
//     }
    
//     getScope(context: ReferenceInfo): Scope {
//         //make sure which cross-reference you are handling right now
//         if(isGreeting(context.container) && context.property === 'person') {
//             //Success! We are handling the cross-reference of a greeting to a person!

//             //get the root node of the document
//             const model = AstUtils.getContainerOfType(context.container, isDocument)!;
//             //select all persons from this document
//             const persons = model.persons;
//             //transform them into node descriptions
//             const descriptions = persons.map(p => this.astNodeDescriptionProvider.createDescription(p, p.name));
//             //create the scope
//             return new MapScope(descriptions);
//         }
//         return EMPTY_SCOPE;
//     }
// }

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createIntelligentSystemDesignLanguageServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    IntelligentSystemDesignLanguage: IntelligentSystemDesignLanguageServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        IntelligentSystemDesignLanguageGeneratedSharedModule
    );
    const IntelligentSystemDesignLanguage = inject(
        createDefaultModule({ shared }),
        IntelligentSystemDesignLanguageGeneratedModule,
        IntelligentSystemDesignLanguageModule
    );
    shared.ServiceRegistry.register(IntelligentSystemDesignLanguage);
    registerValidationChecks(IntelligentSystemDesignLanguage);
    return { shared, IntelligentSystemDesignLanguage };
}
